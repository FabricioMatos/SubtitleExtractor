import os
import re
import requests
from bs4 import BeautifulSoup
import urllib.request
import urllib.parse


class amazonExtractor(object):
	
	"""docstring for netflixExtractor"""
	
	def __init__(self,url):
		print("Detected Amazon\nProcessing....\n")
		self.loginRequired = False
		self.urlName = url
		self.debug = False
		self.requestsFileName = "iDoNotExistDefinitelyOnThisComputerFolder.html"
		pass 


	def getSubtitles(self):

		"""	
		The main function which uses helper functions to get the subtitles
		"""

		self.createSoupObject()
		
		self.getTitle()
		print(self.title)
		
		rawLink = self.getRawSubtitleLink()
		decodedLink = self.decodeLink(rawLink)
		if self.debug:
			print(decodedLink)
		
		stringToAppend = self.checkAvailableLanguages()
		FinalUrl = self.getFinalUrl(decodedLink,stringToAppend)
		
		if self.debug:
			print(FinalUrl)

		returnValue = self.downloadXMLTranscript(FinalUrl)

		#srtText = self.convertDfxpToSrt(str(self.requestObjectv.text))
		#srtText = self._parseXml(str(self.requestObjectv.text))
		#print(srtText)
		self.deleteUnnecessaryfiles()

		return returnValue

	def createSoupObject(self):
		
		requestObject = requests.get(self.urlName)

		# fileHandler = open("requests.txt", "w")
		# fileHandler.write(requestObject.text)
		# fileHandler.close() 
		
		self.soupObject = BeautifulSoup(requestObject.text,from_encoding="utf8")
		#soupObject1 = BeautifulSoup(requestObject.text,"lxml")
		#print(self.soupObject.original_encoding)

		fh = open(self.requestsFileName, "w")
		fh.write(str(self.soupObject))
		fh.close()		

		pass

	def getRawSubtitleLink(self):
		
		"""
		This function returns the Raw Link which is in encoded format. 
		Note - This is still an incomplete URL. 
		The variable UglyString contains the complete URL.
		
		"""

		rawLink = ""
		self.uglyString = ""

		searchStringList = ["timed","TTS_URL","caption_tracks"]
		print()
		fh = open(self.requestsFileName,"r")

		for lines in fh:
			
			if searchStringList[0] in lines and searchStringList[1] in lines :
				lis  = lines.split('"')
				captionPosition = 0
				for i in range(len(lis)):
					if searchStringList[1] in lis[i]:
						captionPosition = i+1
						break
					
				rawLink = str(lis[captionPosition])

			elif searchStringList[0] in lines:
				lis = lines.split('"')
				position = 0
				#print(lis)
				for i in range(len(lis)):
					if searchStringList[2] in lis[i]:
						position = i+2
						break
				if position:
					self.uglyString = str(lis[position])

		fh.close()

		return rawLink
		
		pass

	def decodeLink(self,rawLink):

		"""
		This function decodes the requested URL
		"""

		rawLink = urllib.parse.unquote(rawLink)
		rawLink = rawLink.replace("\\u0026","&")
		decodedLink = rawLink.replace("\\","")
		
		return decodedLink
		pass


	def checkAvailableLanguages(self):

		"""
		This function checks for the available subtitle languages and prmopts the user to select the language
		"""
		
		print("<<<------ Choose the corressponding number for selecting the language ----->>>")
		
		self.uglyString = urllib.parse.unquote(str(self.uglyString))
		self.uglyString = self.uglyString.replace("\\u0026","&")
		self.uglyString = self.uglyString.replace("\\","")

	#	print(self.uglyString)
		lang = self.uglyString.split("&")
		availableLangList = []
		for info in lang:
			if info.startswith( 'lang' ):
				availableLangList.append(info)
		if self.debug:
			print(availableLangList)
		for languages in range(len(availableLangList)):
			
			langKey,equalKey,Language = availableLangList[languages].partition("=")
			if self.debug:
				print(Language)
			LanguageKey,hyphenKey,randomVar = Language.partition("-")
			if self.debug:
				print(LanguageKey)
			print("<%d> - "%(languages+1),end="")

#			[languageDict[k] for k in languageDict.keys() if 'zh' in k]
			if LanguageKey in self.languageDict.keys():
				print(self.languageDict[LanguageKey],end="  ")
			print("(%s)"%(Language))

		optionChoice = input()
		
		try:
			optionChoice = int(optionChoice)
		except:
			print("You have entered an invalid option. Application will download the first option available.")
			optionChoice = 1			

		if self.debug:
		 	print(availableLangList[optionChoice-1])
			
		return availableLangList[optionChoice-1] 
		

	def getFinalUrl(self, Link,subString):
	
		"""
		This function returns the final URL which contains the transcripts
		"""

		Link += "&"
		Link += subString
		return Link

		pass

	def downloadXMLTranscript(self,FinalUrl):

		"""
		This function fetches the captions and writes them into a file in XML
		"""

		autoGeneratedUrl = "&kind=asr"
		try:
			self.requestObjectv = requests.get(FinalUrl)
			print("Creating ~  '%s.xml' ..."%(self.title))
			subsFileHandler = open(self.title + ".xml","w")
			
			#It probably could be auto-generated subtitles. Lets try even that here.
			#Auto-generated subtitles need - "&kind=asr" to be appended to the FinalUrl

			if not self.requestObjectv.text:
					FinalUrl += autoGeneratedUrl
					self.requestObjectv = requests.get(FinalUrl)
			self.requestObjectv = BeautifulSoup(self.requestObjectv.text)
			subsFileHandler.write(str(self.requestObjectv.transcript.prettify()))
			subsFileHandler.close()

			return 1

		except:
			return 0
		pass
	
	def convertDfxpToSrt(self,xml_string):
		
		pass
		
	def getTitle(self):

		"""
		This function returns the title of the video. This is also used for naming the file.

		<title>VIDEO NAME - YouTube</title>
		
		"""
		self.title = "YouTube_subtitles"
		try:
			titleString = self.soupObject.title.string
			self.title = titleString.replace(" - YouTube","")			
		except:
			pass

		pass

	def deleteUnnecessaryfiles(self):

		if not self.debug:
			try:
				os.remove(self.requestsFileName)
			except:
				pass